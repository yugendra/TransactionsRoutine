// Code generated by MockGen. DO NOT EDIT.
// Source: ./interactor/database.go

// Package mocks is a generated GoMock package.
package mocks

import (
	"github.com/yugendra/TransactionsRoutine/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabaseInteractor is a mock of DatabaseInteractor interface.
type MockDatabaseInteractor struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseInteractorMockRecorder
}

// MockDatabaseInteractorMockRecorder is the mock recorder for MockDatabaseInteractor.
type MockDatabaseInteractorMockRecorder struct {
	mock *MockDatabaseInteractor
}

// NewMockDatabaseInteractor creates a new mock instance.
func NewMockDatabaseInteractor(ctrl *gomock.Controller) *MockDatabaseInteractor {
	mock := &MockDatabaseInteractor{ctrl: ctrl}
	mock.recorder = &MockDatabaseInteractorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseInteractor) EXPECT() *MockDatabaseInteractorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDatabaseInteractor) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDatabaseInteractorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDatabaseInteractor)(nil).Close))
}

// CreateAccount mocks base method.
func (m *MockDatabaseInteractor) CreateAccount(account *entities.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", account)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount.
func (mr *MockDatabaseInteractorMockRecorder) CreateAccount(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockDatabaseInteractor)(nil).CreateAccount), account)
}

// CreateTransaction mocks base method.
func (m *MockDatabaseInteractor) CreateTransaction(transaction *entities.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockDatabaseInteractorMockRecorder) CreateTransaction(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockDatabaseInteractor)(nil).CreateTransaction), transaction)
}

// GetAccount mocks base method.
func (m *MockDatabaseInteractor) GetAccount(accountId uint) (*entities.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", accountId)
	ret0, _ := ret[0].(*entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockDatabaseInteractorMockRecorder) GetAccount(accountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockDatabaseInteractor)(nil).GetAccount), accountId)
}
